# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Status(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id: int=None, pump1: bool=None, pump2: bool=None, water_heater: bool=None, fan: bool=None, air_temp: int=None, air_heater: bool=None, water_temp: int=None, water_ph: int=None, feeder: bool=None, last_feeding: str=None):
        """
        Status - a model defined in Swagger

        :param id: The id of this Status.
        :type id: int
        :param pump1: The pump1 of this Status.
        :type pump1: bool
        :param pump2: The pump2 of this Status.
        :type pump2: bool
        :param water_heater: The water_heater of this Status.
        :type water_heater: bool
        :param fan: The fan of this Status.
        :type fan: bool
        :param air_temp: The air_temp of this Status.
        :type air_temp: int
        :param air_heater: The air_heater of this Status.
        :type air_heater: bool
        :param water_temp: The water_temp of this Status.
        :type water_temp: int
        :param water_ph: The water_ph of this Status.
        :type water_ph: int
        :param feeder: The feeder of this Status.
        :type feeder: bool
        :param last_feeding: The last_feeding of this Status.
        :type last_feeding: str
        """
        self.swagger_types = {
            'id': int,
            'pump1': bool,
            'pump2': bool,
            'water_heater': bool,
            'fan': bool,
            'air_temp': int,
            'air_heater': bool,
            'water_temp': int,
            'water_ph': int,
            'feeder': bool,
            'last_feeding': str
        }

        self.attribute_map = {
            'id': 'id',
            'pump1': 'pump1',
            'pump2': 'pump2',
            'water_heater': 'water_heater',
            'fan': 'fan',
            'air_temp': 'air_temp',
            'air_heater': 'air_heater',
            'water_temp': 'water_temp',
            'water_ph': 'water_ph',
            'feeder': 'feeder',
            'last_feeding': 'last_feeding'
        }

        self._id = id
        self._pump1 = pump1
        self._pump2 = pump2
        self._water_heater = water_heater
        self._fan = fan
        self._air_temp = air_temp
        self._air_heater = air_heater
        self._water_temp = water_temp
        self._water_ph = water_ph
        self._feeder = feeder
        self._last_feeding = last_feeding

    @classmethod
    def from_dict(cls, dikt) -> 'Status':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Status of this Status.
        :rtype: Status
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """
        Gets the id of this Status.

        :return: The id of this Status.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """
        Sets the id of this Status.

        :param id: The id of this Status.
        :type id: int
        """

        self._id = id

    @property
    def pump1(self) -> bool:
        """
        Gets the pump1 of this Status.

        :return: The pump1 of this Status.
        :rtype: bool
        """
        return self._pump1

    @pump1.setter
    def pump1(self, pump1: bool):
        """
        Sets the pump1 of this Status.

        :param pump1: The pump1 of this Status.
        :type pump1: bool
        """

        self._pump1 = pump1

    @property
    def pump2(self) -> bool:
        """
        Gets the pump2 of this Status.

        :return: The pump2 of this Status.
        :rtype: bool
        """
        return self._pump2

    @pump2.setter
    def pump2(self, pump2: bool):
        """
        Sets the pump2 of this Status.

        :param pump2: The pump2 of this Status.
        :type pump2: bool
        """

        self._pump2 = pump2

    @property
    def water_heater(self) -> bool:
        """
        Gets the water_heater of this Status.

        :return: The water_heater of this Status.
        :rtype: bool
        """
        return self._water_heater

    @water_heater.setter
    def water_heater(self, water_heater: bool):
        """
        Sets the water_heater of this Status.

        :param water_heater: The water_heater of this Status.
        :type water_heater: bool
        """

        self._water_heater = water_heater

    @property
    def fan(self) -> bool:
        """
        Gets the fan of this Status.

        :return: The fan of this Status.
        :rtype: bool
        """
        return self._fan

    @fan.setter
    def fan(self, fan: bool):
        """
        Sets the fan of this Status.

        :param fan: The fan of this Status.
        :type fan: bool
        """

        self._fan = fan

    @property
    def air_temp(self) -> int:
        """
        Gets the air_temp of this Status.

        :return: The air_temp of this Status.
        :rtype: int
        """
        return self._air_temp

    @air_temp.setter
    def air_temp(self, air_temp: int):
        """
        Sets the air_temp of this Status.

        :param air_temp: The air_temp of this Status.
        :type air_temp: int
        """

        self._air_temp = air_temp

    @property
    def air_heater(self) -> bool:
        """
        Gets the air_heater of this Status.

        :return: The air_heater of this Status.
        :rtype: bool
        """
        return self._air_heater

    @air_heater.setter
    def air_heater(self, air_heater: bool):
        """
        Sets the air_heater of this Status.

        :param air_heater: The air_heater of this Status.
        :type air_heater: bool
        """

        self._air_heater = air_heater

    @property
    def water_temp(self) -> int:
        """
        Gets the water_temp of this Status.

        :return: The water_temp of this Status.
        :rtype: int
        """
        return self._water_temp

    @water_temp.setter
    def water_temp(self, water_temp: int):
        """
        Sets the water_temp of this Status.

        :param water_temp: The water_temp of this Status.
        :type water_temp: int
        """

        self._water_temp = water_temp

    @property
    def water_ph(self) -> int:
        """
        Gets the water_ph of this Status.

        :return: The water_ph of this Status.
        :rtype: int
        """
        return self._water_ph

    @water_ph.setter
    def water_ph(self, water_ph: int):
        """
        Sets the water_ph of this Status.

        :param water_ph: The water_ph of this Status.
        :type water_ph: int
        """

        self._water_ph = water_ph

    @property
    def feeder(self) -> bool:
        """
        Gets the feeder of this Status.

        :return: The feeder of this Status.
        :rtype: bool
        """
        return self._feeder

    @feeder.setter
    def feeder(self, feeder: bool):
        """
        Sets the feeder of this Status.

        :param feeder: The feeder of this Status.
        :type feeder: bool
        """

        self._feeder = feeder

    @property
    def last_feeding(self) -> str:
        """
        Gets the last_feeding of this Status.

        :return: The last_feeding of this Status.
        :rtype: str
        """
        return self._last_feeding

    @last_feeding.setter
    def last_feeding(self, last_feeding: str):
        """
        Sets the last_feeding of this Status.

        :param last_feeding: The last_feeding of this Status.
        :type last_feeding: str
        """

        self._last_feeding = last_feeding

